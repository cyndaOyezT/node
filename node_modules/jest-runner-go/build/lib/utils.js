'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toTestResult = exports.parseGoOutput = exports.pathContainsFailedTest = undefined;

var _types = require('../types');

const matchTestFileName = /([A-Za-z_])\w+(_test.go)/g;

/* eslint-disable no-plusplus */
const pathContainsFailedTest = exports.pathContainsFailedTest = (line, relativeTestPath) => {
  // eslint-disable-next-line max-len
  const testFile = line.match(new RegExp(matchTestFileName))[0];
  return relativeTestPath.indexOf(testFile) > -1;
};

// eslint-disable-next-line max-len
const parseGoOutput = exports.parseGoOutput = (relativeTestPath, start, output) => {
  const report = {
    passed: 0,
    failed: 0,
    failureMessage: '',
    duration: 0,
    end: 0,
    name: relativeTestPath
  };

  output.forEach(line => {
    if (line && line.indexOf('.go:') > -1 && pathContainsFailedTest(line, relativeTestPath)) {
      report.failed++;
      report.failureMessage = line;
    }

    if (line && line.indexOf('ok') > -1) {
      report.passed++;
    }
  });

  return report;
};

const toTestResult = exports.toTestResult = test => ({
  ancestorTitles: [],
  duration: test.duration,
  failureMessages: test.failed > 0 ? test.failureMessage : '',
  fullName: test.name,
  numPassingAsserts: test.failed === 0 ? 1 : 0,
  status: test.failed === 0 ? 'passed' : 'failed',
  title: test.name
});